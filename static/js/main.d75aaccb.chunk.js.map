{"version":3,"sources":["components/Header.js","components/Todo.js","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Todo","_ref","todo","index","completeTask","deleteTask","style","textDecoration","isCompleted","text","onClick","TodoForm","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","onSubmit","e","preventDefault","type","placeholder","onChange","target","App","todos","setTodos","newTodos","toConsumableArray","splice","components_Header","map","components_Todo","key","components_TodoForm","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAUeA,MARf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,sCCcSE,MAjBf,SAAAC,GAAyD,IAAzCC,EAAyCD,EAAzCC,KAAMC,EAAmCF,EAAnCE,MAAOC,EAA4BH,EAA5BG,aAAcC,EAAcJ,EAAdI,WACzC,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,MAAO,CAACC,eAAgBL,EAAKM,YAAc,eAAiB,KAC/EN,EAAKO,KACNb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeW,QAAU,kBAAKN,EAAaD,KAA7D,YAGAP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaW,QAAU,kBAAKL,EAAWF,KAAzD,QCWOQ,MAnBf,SAAAV,GAA8B,IAAVW,EAAUX,EAAVW,QAAUC,EACFC,mBAAS,IADPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACrBK,EADqBH,EAAA,GACdI,EADcJ,EAAA,GAY5B,OACEnB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAOqB,SAVJ,SAAAC,GACnBA,EAAEC,iBACEJ,IAGJN,EAAQM,GACRC,EAAS,OAKPvB,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,OAAOxB,UAAU,QAAQyB,YAAY,oBAAoBN,MAAOA,EAAOO,SAAW,SAACJ,GAAD,OAAOF,EAASE,EAAEK,OAAOR,kBC0C9GS,MApDf,WAAe,IAAAd,EACaC,mBAAS,CACjC,CACEL,KAAM,oBACND,aAAa,GAEf,CACEC,KAAM,gBACND,aAAa,GAEf,CACEC,KAAM,UACND,aAAa,KAZJO,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNe,EADMb,EAAA,GACCc,EADDd,EAAA,GAqBPX,EAAe,SAAAD,GACnB,IAAM2B,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GACrBE,EAAS3B,GAAOK,aAAesB,EAAS3B,GAAOK,YAC/CqB,EAASC,IAGLzB,EAAa,SAAAF,GACjB,IAAM2B,EAAQd,OAAAe,EAAA,EAAAf,CAAOY,GACrBE,EAASE,OAAO7B,EAAO,GACvB0B,EAASC,IAGX,OACElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACmC,EAAD,MACArC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACZ6B,EAAMM,IAAI,SAAChC,EAAMC,GAAP,OACTP,EAAAC,EAAAC,cAACqC,EAAD,CACEC,IAAKjC,EACLA,MAAOA,EACPD,KAAMA,EACNE,aAAcA,EACdC,WAAYA,MAGhBT,EAAAC,EAAAC,cAACuC,EAAD,CAAUzB,QA9BA,SAAAH,GACd,IAAMqB,EAAQ,GAAAQ,OAAAtB,OAAAe,EAAA,EAAAf,CAAOY,GAAP,CAAc,CAAEnB,UAC9BoB,EAASC,SCZOS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d75aaccb.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>React Hooks To-Do List</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react'\n\nfunction Todo({ todo, index, completeTask, deleteTask }) {\n  return (\n    <div className=\"todo\" style={{textDecoration: todo.isCompleted ? 'line-through' : ''}}>\n      {todo.text}\n      <div className=\"btn-container\">\n        <button className=\"complete-btn\" onClick={ ()=> completeTask(index) } >\n          Complete\n        </button>\n        <button className=\"delete-btn\" onClick={ ()=> deleteTask(index) } >\n          X\n        </button>\n\n      </div>\n    </div>\n  );\n}\n\nexport default Todo;\n","import React, {useState} from 'react'\n\nfunction TodoForm({ addTodo }){\n  const [value, setValue] = useState('')\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(!value){\n      return\n    }\n    addTodo(value);\n    setValue('');\n  }\n\n  return(\n    <form className=\"form\" onSubmit={handleSubmit}>\n      <input type=\"text\" className=\"input\" placeholder=\"Add To-Do Here...\" value={value} onChange={ (e) => setValue(e.target.value) }/>\n    </form>\n  )\n}\n\nexport default TodoForm\n","import React, { useState } from \"react\";\nimport Header from \"./components/Header.js\";\nimport Todo from \"./components/Todo.js\";\nimport TodoForm from \"./components/TodoForm.js\";\nimport \"./App.css\";\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    {\n      text: \"Learn about React\",\n      isCompleted: false\n    },\n    {\n      text: \"Make ToDo App\",\n      isCompleted: false\n    },\n    {\n      text: \"Get $$$\",\n      isCompleted: false\n    }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  };\n\n  const completeTask = index => {\n    const newTodos = [...todos];\n    newTodos[index].isCompleted = !newTodos[index].isCompleted;\n    setTodos(newTodos);\n  };\n\n  const deleteTask = index => {\n    const newTodos = [...todos];\n    newTodos.splice(index, 1);\n    setTodos(newTodos);\n  };\n\n  return (\n    <div className=\"app\">\n      <Header />\n      <div className=\"todo-list\">\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n            completeTask={completeTask}\n            deleteTask={deleteTask}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}